apiVersion: v1
data:
  userdata: version: v1alpha1
debug: false
persist: true
machine:
    type: init
    token: i8ws62.cjfn5q5cy73jp41s
    ca:
        crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJQekNCOHFBREFnRUNBaEVBclY1cmtneFRvVW1BVW40R0ZFNXZrekFGQmdNclpYQXdFREVPTUF3R0ExVUUKQ2hNRmRHRnNiM013SGhjTk1qSXhNVEkxTURVeE5EUXdXaGNOTXpJeE1USXlNRFV4TkRRd1dqQVFNUTR3REFZRApWUVFLRXdWMFlXeHZjekFxTUFVR0F5dGxjQU1oQUsrMWpQM3ZhRVNtVXB5ZzU0VjUvSmlZT2NxQkJnTlRjcCthClZsMXpxL3NQbzJFd1h6QU9CZ05WSFE4QkFmOEVCQU1DQW9Rd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUcKQ0NzR0FRVUZCd01DTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkd1UGtQeFJhN2JaRURRTwoyMlBWRU9iVjlTdWFNQVVHQXl0bGNBTkJBQkJsK2N2VC9maE5lek4wcTZuYjBpZFJ6UllVMkEySnQyZjI4Zmg5ClJTSi81NUExeTREK0RJYUdTL2FlL2tkaUtKVnpuZkNBWmVVemlPNnBMS09GaFFFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
        key: LS0tLS1CRUdJTiBFRDI1NTE5IFBSSVZBVEUgS0VZLS0tLS0KTUM0Q0FRQXdCUVlESzJWd0JDSUVJTERvb1FUM3JqeGQybTZVUlRvVno0NkV1d2FqMmpiRStZNmVMM3VrMlNNTQotLS0tLUVORCBFRDI1NTE5IFBSSVZBVEUgS0VZLS0tLS0K
    certSANs:
        - 192.168.1.40
        - 192.168.1.41
        - 192.168.1.42
        - 192.168.1.43
        - aza.home.arpa
    kubelet:
        image: ghcr.io/siderolabs/kubelet:v1.25.4
    network:
      interfaces:
        - interface: br0
          dhcp: true
          bridge:
            interfaces:
              - eth0
            stp:
              enabled: true
          vip:
            ip: 192.168.1.40
          mtu: 1500
      nameservers:
        - 192.168.1.9

    #       # # Picks a network device using the selector.
    #       # # select a device with bus prefix 00:*.
    #       # deviceSelector:
    #       #     busPath: 00:* # PCI, USB bus prefix, supports matching by wildcard.
    #       # # select a device with mac address matching `*:f0:ab` and `virtio` kernel driver.
    #       # deviceSelector:
    #       #     hardwareAddr: '*:f0:ab' # Device hardware address, supports matching by wildcard.
    #       #     driver: virtio # Kernel driver, supports matching by wildcard.
    #       # # Bond specific options.
    #       # bond:
    #       #     # The interfaces that make up the bond.
    #       #     interfaces:
    #       #         - eth0
    #       #         - eth1
    #       #     mode: 802.3ad # A bond option.
    #       #     lacpRate: fast # A bond option.
    #       # # Wireguard specific configuration.
    #       # # wireguard server example
    #       # wireguard:
    #       #     privateKey: ABCDEF... # Specifies a private key configuration (base64 encoded).
    #       #     listenPort: 51111 # Specifies a device's listening port.
    #       #     # Specifies a list of peer configurations to apply to a device.
    #       #     peers:
    #       #         - publicKey: ABCDEF... # Specifies the public key of this peer.
    #       #           endpoint: 192.168.1.3 # Specifies the endpoint of this peer entry.
    #       #           # AllowedIPs specifies a list of allowed IP addresses in CIDR notation for this peer.
    #       #           allowedIPs:
    #       #             - 192.168.1.0/24
    #       # # wireguard peer example
    #       # wireguard:
    #       #     privateKey: ABCDEF... # Specifies a private key configuration (base64 encoded).
    #       #     # Specifies a list of peer configurations to apply to a device.
    #       #     peers:
    #       #         - publicKey: ABCDEF... # Specifies the public key of this peer.
    #       #           endpoint: 192.168.1.2 # Specifies the endpoint of this peer entry.
    #       #           persistentKeepaliveInterval: 10s # Specifies the persistent keepalive interval for this peer.
    #       #           # AllowedIPs specifies a list of allowed IP addresses in CIDR notation for this peer.
    #       #           allowedIPs:
    #       #             - 192.168.1.0/24

    # Used to provide instructions for installations.
    install:
      disk: /dev/vda
      image: ghcr.io/siderolabs/installer:v1.3.0-alpha.2
      bootloader: true
      wipe: true
     #extraKernelArgs:
     #  - talos.platform=metal
     #  - reboot=k
     ## Allows for supplying additional system extension images to install on top of base Talos image.
     #extensions:
     #    - image: ghcr.io/siderolabs/gvisor:20220117.0-v1.0.0 # System extension image.
    # MachineDisks list example.
   #disks:
   #  - device: /dev/vdb
   #    partitions:
   #      - mountpoint: /var
   #        size: 2048 MB

    # Used to configure the machine's container image registry mirrors.
    registries:
        # Specifies mirror configuration for each registry.
        mirrors:
            k8s.gcr.io:
                # List of endpoints (URLs) for registry mirrors to use.
                endpoints:
                    - https://registry.k8s.io
                    - https://k8s.gcr.io
        
        # # Specifies TLS & auth configuration for HTTPS image registries.
        # config:
        #     registry.insecure:
        #         # The TLS configuration for the registry.
        #         tls:
        #             insecureSkipVerify: true # Skip TLS server certificate verification (not recommended).
        #             
        #             # # Enable mutual TLS authentication with the registry.
        #             # clientIdentity:
        #             #     crt: LS0tIEVYQU1QTEUgQ0VSVElGSUNBVEUgLS0t
        #             #     key: LS0tIEVYQU1QTEUgS0VZIC0tLQ==
        #         
        #         # # The auth configuration for this registry.
        #         # auth:
        #         #     username: username # Optional registry authentication.
        #         #     password: password # Optional registry authentication.
    # Features describe individual Talos features that can be switched on or off.
    features:
        rbac: false
        stableHostname: false
        apidCheckExtKeyUsage: true # Enable checks for extended key usage of client certificates in apid.
        
        # Configure Talos API access from Kubernetes pods.
        kubernetesTalosAPIAccess:
            enabled: false # Enable Talos API access from Kubernetes pods.
            # The list of Talos API roles which can be granted for access from Kubernetes pods.
            allowedRoles:
                - os:reader
            # The list of Kubernetes namespaces Talos API access is available from.
            allowedKubernetesNamespaces:
                - kube-system
                - talos-system
    
    # # Provides machine specific control plane configuration options.

    # # ControlPlane definition example.
    # controlPlane:
    #     # Controller manager machine specific configuration options.
    #     controllerManager:
    #         disabled: false # Disable kube-controller-manager on the node.
    #     # Scheduler machine specific configuration options.
    #     scheduler:
    #         disabled: true # Disable kube-scheduler on the node.

    # # Used to provide static pod definitions to be run by the kubelet directly bypassing the kube-apiserver.

    # # nginx static pod.
    # pods:
    #     - apiVersion: v1
    #       kind: pod
    #       metadata:
    #         name: nginx
    #       spec:
    #         containers:
    #             - image: nginx
    #               name: nginx

    # # Used to partition, format and mount additional disks.

    # # Allows the addition of user specified files.

    # # MachineFiles usage example.
    # files:
    #     - content: '...' # The contents of the file.
    #       permissions: 0o666 # The file's permissions in octal.
    #       path: /tmp/file.txt # The path of the file.
    #       op: append # The operation to use

    # # The `env` field allows for the addition of environment variables.

    # # Environment variables definition examples.
    # env:
    #     GRPC_GO_LOG_SEVERITY_LEVEL: info
    #     GRPC_GO_LOG_VERBOSITY_LEVEL: "99"
    #     https_proxy: http://SERVER:PORT/
    # env:
    #     GRPC_GO_LOG_SEVERITY_LEVEL: error
    #     https_proxy: https://USERNAME:PASSWORD@SERVER:PORT/
    # env:
    #     https_proxy: http://DOMAIN\USERNAME:PASSWORD@SERVER:PORT/

    # # Used to configure the machine's time settings.

    # # Example configuration for cloudflare ntp server.
    # time:
    #     disabled: false # Indicates if the time service is disabled for the machine.
    #     # Specifies time (NTP) servers to use for setting the system time.
    #     servers:
    #         - time.cloudflare.com
    #     bootTimeout: 2m0s # Specifies the timeout when the node time is considered to be in sync unlocking the boot sequence.

    # # Used to configure the machine's sysctls.

    # # MachineSysctls usage example.
    # sysctls:
    #     kernel.domainname: talos.dev
    #     net.ipv4.ip_forward: "0"

    # # Used to configure the machine's sysfs.

    # # MachineSysfs usage example.
    # sysfs:
    #     devices.system.cpu.cpu0.cpufreq.scaling_governor: performance

    # # Machine system disk encryption configuration.
    # systemDiskEncryption:
    #     # Ephemeral partition encryption.
    #     ephemeral:
    #         provider: luks2 # Encryption provider to use for the encryption.
    #         # Defines the encryption keys generation and storage method.
    #         keys:
    #             - # Deterministically generated key from the node UUID and PartitionLabel.
    #               nodeID: {}
    #               slot: 0 # Key slot number for LUKS2 encryption.
    #         
    #         # # Cipher kind to use for the encryption. Depends on the encryption provider.
    #         # cipher: aes-xts-plain64

    #         # # Defines the encryption sector size.
    #         # blockSize: 4096

    #         # # Additional --perf parameters for the LUKS2 encryption.
    #         # options:
    #         #     - no_read_workqueue
    #         #     - no_write_workqueue

    # # Configures the udev system.
    # udev:
    #     # List of udev rules to apply to the udev system
    #     rules:
    #         - SUBSYSTEM=="drm", KERNEL=="renderD*", GROUP="44", MODE="0660"

    # # Configures the logging system.
    # logging:
    #     # Logging destination.
    #     destinations:
    #         - endpoint: tcp://1.2.3.4:12345 # Where to send logs. Supported protocols are "tcp" and "udp".
    #           format: json_lines # Logs format.

    # # Configures the kernel.
    # kernel:
    #     # Kernel modules to load.
    #     modules:
    #         - name: brtfs # Module name.

    # # Configures the seccomp profiles for the machine.
    # seccompProfiles:
    #     - name: audit.json # The `name` field is used to provide the file name of the seccomp profile.
    #       # The `value` field is used to provide the seccomp profile.
    #       value:
    #         defaultAction: SCMP_ACT_LOG

    # # Configures the node labels for the machine.

    # # node labels example.
    # nodeLabels:
    #     exampleLabel: exampleLabelValue
# Provides cluster specific configuration options.
cluster:
    allowSchedulingOnControlPlanes: true
    id: 0GF_nTNOcidC3Nqp9TGGbmG6qWThz-i0DewQ8HZB3C4= # Globally unique identifier for this cluster (base64 encoded random 32 bytes).
    secret: KbR9AJ9QTBBjyaEz9QdMCEDzsuxbjTkjWYcrQTwuS0E= # Shared secret of cluster (base64 encoded random 32 bytes).
    # Provides control plane specific configuration options.
    controlPlane:
        endpoint: https://192.168.1.40:6443 # Endpoint is the canonical controlplane endpoint, which can be an IP address or a DNS hostname.
    clusterName: aza # Configures the cluster's name.
    # Provides cluster specific network configuration options.
    network:
        dnsDomain: cluster.local # The domain used by Kubernetes DNS.
        # The pod subnet CIDR.
        podSubnets:
            - 10.244.0.0/16
        # The service subnet CIDR.
        serviceSubnets:
            - 10.96.0.0/12
        
        # # The CNI used.
        # cni:
        #     name: custom # Name of CNI to use.
        #     # URLs containing manifests to apply for the CNI.
        #     urls:
        #         - https://docs.projectcalico.org/archive/v3.20/manifests/canal.yaml
    token: q1iosc.ojuaqxf3s6n3sv76 # The [bootstrap token](https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/) used to join the cluster.
    secretboxEncryptionSecret: O5RfsqTW27LbpRQu4XC67sexxoosCSgV5T5S+qaXjv0= # A key used for the [encryption of secret data at rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/).
    # The base64 encoded root certificate authority used by Kubernetes.
    ca:
        crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJpVENDQVMrZ0F3SUJBZ0lRQ0M1c292K3BpcWNpNGNRWlkxbk84VEFLQmdncWhrak9QUVFEQWpBVk1STXcKRVFZRFZRUUtFd3ByZFdKbGNtNWxkR1Z6TUI0WERUSXlNVEV5TlRBMU1UUTBNRm9YRFRNeU1URXlNakExTVRRMApNRm93RlRFVE1CRUdBMVVFQ2hNS2EzVmlaWEp1WlhSbGN6QlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VICkEwSUFCRFdtdnNmN2dVTUdqS09yT25TL3p3bFRvZkplcldpZ2RYUnd6MnE4Y2daVkV6SDg1dHcwVzllbVZpOFEKNWR5T2ZKMElzeXBXWklpTkFsbGQ1cUswNDY2allUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ2hEQWRCZ05WSFNVRQpGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFCkZnUVVpZndibzczMkRaZllva2JuZHgzWDIxU3IzRzh3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUlnU1dwOW9mRHUKaFN3YlVtbDB0TldUeEdOWnJXYVB6dlNlbFQ2WE5WN1BpVWtDSVFDVzhvN29qSXFuUWtVMHRqT0lXc0JpN1FwVApPRXEyYWdLbTJJSStXaGcyNXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
        key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUpadi9BS2pCZHFiQU5nZlZ1VzZGNUdBaFdhekRFTUJnMjBGRzUyMjhmUzRvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFTmFhK3gvdUJRd2FNbzZzNmRML1BDVk9oOGw2dGFLQjFkSERQYXJ4eUJsVVRNZnptM0RSYgoxNlpXTHhEbDNJNThuUWl6S2xaa2lJMENXVjNtb3JUanJnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
    # The base64 encoded aggregator certificate authority used by Kubernetes for front-proxy certificate generation.
    aggregatorCA:
        crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJYekNDQVFhZ0F3SUJBZ0lSQUoyVWpYeUlOcmZrelYxZDRBdmtpZ013Q2dZSUtvWkl6ajBFQXdJd0FEQWUKRncweU1qRXhNalV3TlRFME5EQmFGdzB6TWpFeE1qSXdOVEUwTkRCYU1BQXdXVEFUQmdjcWhrak9QUUlCQmdncQpoa2pPUFFNQkJ3TkNBQVJsNHZGWkt1eGtLb3hoSEtBL1ptNUQyRWx4elBrZzd3c1c1a0RweS9ub3h5RllCL21pCiswTVY1ckY4ZHlvR1cvdmxTSVM5WCs5WUJFSTJqZml1aXRhbW8yRXdYekFPQmdOVkhROEJBZjhFQkFNQ0FvUXcKSFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUZNQU1CQWY4dwpIUVlEVlIwT0JCWUVGSWNqclpJVFpYQVY5ODd5TlpGM0ovVGwyTkFvTUFvR0NDcUdTTTQ5QkFNQ0EwY0FNRVFDCklBY0lIeTAvSDloTk9WcEZNcEozU2JnSjBnUHYzZmJLa2pkSnlDQms1MWxVQWlBUDZyUHJOOFFIS2gyVFUzZHYKQ0JiQ3IrRFZNaDV2blNoVXh4Y1ZpMXdOSlE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
        key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUF3eGM0TE4rRUFla3VXOUZxU1BIdGdZenViWmNIckVtRmpyTlBsdU5YU2ZvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFWmVMeFdTcnNaQ3FNWVJ5Z1AyWnVROWhKY2N6NUlPOExGdVpBNmN2NTZNY2hXQWY1b3Z0RApGZWF4ZkhjcUJsdjc1VWlFdlYvdldBUkNObzM0cm9yV3BnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
    # The base64 encoded private key for service account token generation.
    serviceAccount:
        key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUh0SGhIb3dqV3NKTjByU3liL3pTZkJRVEFaWHZMbTJFSDNCSzh1cWo4UlRvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFbEFQd0JWam5DWEVBY1NnZ29FSS9IckZ5d0pzMVU4SmlzTmdHcXk2SHpzR2R1YUpVUjJJZwplb0hPU1k4aWNQUEJLLzF4WTEwT0E4bzIwYkNiSU9YZUpBPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
    # API server specific configuration options.
    apiServer:
        image: k8s.gcr.io/kube-apiserver:v1.25.4 # The container image used in the API server manifest.
        # Extra certificate subject alternative names for the API server's certificate.
        certSANs:
            - aza
            - aza.home.arpa
            - 192.168.1.40
            - 192.168.1.41
            - 192.168.1.42
            - 192.168.1.43
        disablePodSecurityPolicy: true
       #admissionControl:
       #    - name: PodSecurity # Name is the name of the admission controller.
       #      # Configuration is an embedded configuration object to be used as the plugin's
       #      configuration:
       #        apiVersion: pod-security.admission.config.k8s.io/v1alpha1
       #        kind: PodSecurityConfiguration
       #        defaults:
       #            audit: restricted
       #            audit-version: latest
       #            enforce: baseline
       #            enforce-version: latest
       #            warn: restricted
       #            warn-version: latest
       #        exemptions:
       #            namespaces:
       #                - kube-system
       #            runtimeClasses: []
       #            usernames: []
       ## Configure the API server audit policy.
       #auditPolicy:
       #    apiVersion: audit.k8s.io/v1
       #    kind: Policy
       #    rules:
       #        - level: Metadata
    # Controller manager server specific configuration options.
    controllerManager:
        image: k8s.gcr.io/kube-controller-manager:v1.25.4 # The container image used in the controller manager manifest.
    # Kube-proxy server-specific configuration options
    proxy:
        image: k8s.gcr.io/kube-proxy:v1.25.4 # The container image used in the kube-proxy manifest.
        
        # # Disable kube-proxy deployment on cluster bootstrap.
        # disabled: false
    # Scheduler server specific configuration options.
    scheduler:
        image: k8s.gcr.io/kube-scheduler:v1.25.4 # The container image used in the scheduler manifest.
    # Configures cluster member discovery.
    discovery:
        enabled: true # Enable the cluster membership discovery feature.
        # Configure registries used for cluster member discovery.
        registries:
            # Kubernetes registry uses Kubernetes API server to discover cluster members and stores additional information
            kubernetes:
                disabled: true # Disable Kubernetes discovery registry.
            # Service registry is using an external service to push and pull information about cluster members.
            service: {}
            # # External service endpoint.
            # endpoint: https://discovery.talos.dev/
    # Etcd specific configuration options.
    etcd:
        # The `ca` is the root certificate authority of the PKI.
        ca:
            crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJmRENDQVNPZ0F3SUJBZ0lRUXRrY1AxWTlBMVFJT09GdklhQi9WakFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1JsZEdOa01CNFhEVEl5TVRFeU5UQTFNVFEwTUZvWERUTXlNVEV5TWpBMU1UUTBNRm93RHpFTgpNQXNHQTFVRUNoTUVaWFJqWkRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkZWQWJETTdSOW1iCldxMlkxcGlvakp6b0ZxbDl2Lzc3NVZsUjZTZTZ1U3FmS1Biem5COS9MOHBXWEdsWms2ekVBaGp2c1ZYWTE2T3MKM0lHRWIzMXljMmlqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjRApBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVQXd1d0N1amFwaWs5CloxOURrRVZTVlJDTkdLOHdDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWdUV29EeDU0Z3U5VEdzL05oSWhOaENiblAKU3VuVHZPL1FhYWRRTXgzcTdKVUNJR0RxcjhmUHl2aFphRHZEaUFyMkNLSm43T2M4ZlVqMXMvZ1FLSzBFTU1adQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
            key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU5ZbUhFd0JIQnN3RjR1bVdGdEFwSUZ6R3FqUDRHdjNkdDhJR0hpdW5pWjdvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFVlVCc016dEgyWnRhclpqV21LaU1uT2dXcVgyLy92dmxXVkhwSjdxNUtwOG85dk9jSDM4dgp5bFpjYVZtVHJNUUNHTyt4VmRqWG82emNnWVJ2ZlhKemFBPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
        
        # # The container image used to create the etcd service.
        # image: gcr.io/etcd-development/etcd:v3.5.5-arm64

        # # The `advertisedSubnets` field configures the networks to pick etcd advertised IP from.
        # advertisedSubnets:
        #     - 10.0.0.0/8
    # A list of urls that point to additional manifests.
    extraManifests: []
    #   - https://www.example.com/manifest1.yaml
    #   - https://www.example.com/manifest2.yaml

    # A list of inline Kubernetes manifests.
    inlineManifests: []
    #   - name: namespace-ci # Name of the manifest.
    #     contents: |- # Manifest contents as a string.
    #       apiVersion: v1
    #       kind: Namespace
    #       metadata:
    #       	name: ci

    
    # # Core DNS specific configuration options.
    # coreDNS:
    #     image: docker.io/coredns/coredns:1.10.0 # The `image` field is an override to the default coredns image.

    # # External cloud provider configuration.
    # externalCloudProvider:
    #     enabled: true # Enable external cloud provider.
    #     # A list of urls that point to additional manifests for an external cloud provider.
    #     manifests:
    #         - https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/v1.20.0-alpha.0/manifests/rbac.yaml
    #         - https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/v1.20.0-alpha.0/manifests/aws-cloud-controller-manager-daemonset.yaml

    # # A map of key value pairs that will be added while fetching the extraManifests.
    # extraManifestHeaders:
    #     Token: "1234567"
    #     X-ExtraInfo: info

    # # Settings for admin kubeconfig generation.
    # adminKubeconfig:
    #     certLifetime: 1h0m0s # Admin kubeconfig certificate lifetime (default is 1 year).

kind: Secret
metadata:
  creationTimestamp: null
  name: talos-controlplane-init-userdata
  namespace: default
